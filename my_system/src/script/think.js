/*
    ❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤想法和经验总结，为了更好的体系❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤❤
    总结核心
    关系，对象，人
    形式和本质
    有时候形式的概念太多了，记不住，什么各种模式，什么indexof到includes的提炼形式化，然后有点晕，就回想下原点是撒，
    是一，是简单，是能我把逻辑代码理的很顺，看到内在形式，基于人的关系
 */

/*
    😂工作中要有的强化的思想和设计模式
    装饰模式，重写方法，添加自己需要的东西
    状态模式，运行一次后重写方法赋值新的状态方法
    还是同一个方法，同一个名字

    以后在写业务逻辑的时候一定要有对象的概念，把业务逻辑对象化

    写逻辑的时候的状态的入口和出口要统一，比如创建任务单那块，很多场景都用到，要记录不同进入的场景和出去
    // 因为审核在详情和创建售后里面用的是用同一个，那么订单详情接口数据和售后单详情接口的数据字段需要统一下，方便审核代码保持统一
        data.order_server_list = data.server_list;
        data.order_consignee = data.oc_info;
        data.company_code = data.order_info.company_code;
        data.city_id = data.order_info.city_id;
    这里的意思是我有一个公用的组件，然后数据是不能接口给的，那我不能再组件里面去判断拿不同的值，会死人的，所以我在组件外面处理组件需要拿的值，把不同的变成一样的，然后组件里面该怎么拿就怎么拿，保持了组件的统一性，
    这不单单体现在这里，这是一种思想，可以运用到很多地方

    props传值破坏了一个入口的概念

    保证统一得入口，比如判断状体是某一个值后拿这个值全部应用于这个状态得判断，不要觉得另一个地方用另外一个数据判断方便就用了，会造成多入口而混乱，

    减少单独变量和运用，造成零散，后期不要控制，如若要打点就跟着某个具体得对象走，在对象上打点，

    😂工作中要做的
    怎么把写的关系或是依附联动方法运用上去，减少些逻辑的时候考虑的事情，越少越好，其实就是一个动了有很多联动记不住，目的就是只关注当前的行为

    处理数据的代码和逻辑代码分开

    用用装饰模式，代码有立体感，主要是不用所有的逻辑都写在一个函数中，不敢是赋值还是处理数据，试试，我觉得应该很有趣

    👍刚刚想到一个弹窗用于不同的场景不就是状态么，提交的数据不一样，显示的title不一样，我可以试一下从这个入手练一下状态模式，其实也是解决多条路变一条路的问题
    用状态消灭if

    😂理解面向对象和函数式的区别
    面向对象通多特定的行为将很多数据类型逻辑的联系在一起，函数式则关注如何在这些数据类型之上通过组合来连接各种操作，因此存在一个两种编程范式都可以有效利用的算平衡点
    面向对象的关键是创建继承层次结构并将方法与数据紧密的绑定在一起，函数式编程则倾向于通过广义的多态函数交叉应用于不同的数据类型，同时避免使用this
    这两段话我理解下来就是，两者不冲突，函数式是一种动作概念，比如说跑跳这种，通用的行为，谁的行为不关心，而面向对象正好是函数式那个不关心的谁，实体，独立唯一的，为什么说他把属性和方法揉成一团了呢，就是应为对象有属性有方法，离不开
    所以我们既要关心唯一的对象也要关心通用的行为，甚至上升到形而上的概念的范畴

    😂分类，取名，都依附对象-人
    文件夹和文件分类
    order｛
            create｛
                    component｛
                            table｛
                            ｝
                            modal｛
                            ｝
                    ｝
            ｝
    ｝
    体会下来是这样的，还是从人的角度去出发，面向对象，我们首先最直接能懂得就是人自己这个对象，所以一开始分的时候会告诉我这是什么，我怎么最能直接的认识他，先告诉我这是什么，这是人，这是细胞，那个对于我来说好认识，当然是人了，首先看到的是人，而不是构成人的细胞，所以页面一开始不能表格啊，弹窗啊，按钮啊这些组件来创建顶级文件夹，英文你告诉我这些零散的东西，我还是不知道这到底是什么，这些抽象普遍的写在这个什么里面去就好了

    js逻辑代码里面取名字还是要告诉人家这是什么，而不是告诉人家这个叫什么名字，名字只是这个是什么东西的属性，并不能说明这东西到底是个什么东西
    驳：现在我不这么认为，名字无所谓什么，要说明我是我，单单一个名字是不够的，比如有很多其他的属性，比如电话身份证邮箱身高体重喜好等等。。。。。。

    打个比方，我要找一个什么，如果我知道这个的名字的话我会直接叫这个名字，如果我不知道这个名字的话，我会说这个东西是什么
    就像，有个人叫小明，我会说帮我去找小明，我不会说找个小明的人，我们事先已经知道小明是个人了，所以在以后的交流当中就可以不再去声明小明是个人了，
    再打个比方，有辆车叫奔驰，我会说我要买辆奔驰，我不会说我要买辆叫奔驰的车，因为大家都知道我在说什么，都知道奔驰是辆车的牌子，也可以说需要语境，通俗点就是这都是日常用语，比较生僻的就困难一点，好比有颗石头叫海蓝之星，然后我说我要颗海蓝之星，被人会先问海蓝之星是什么，虽然是什么是交流的前提，但一旦有了这个前提后，留下的就只有名字了，也就是说，是什么必须有，但不是每次都需要，一个次告知就ok了，

    var data = {
        selector: {
            typeName: {
                value: '',
                list: [],
            },
            businessMode: {
                value: '',
                list: [],
                originalList: [],
                isDisabled: false,
            },
        },
        input: {
            tableName: '',
        }
    };

    var data2 = {
        typeName: {
            value: '',
            list: [],
            is: 'selector',
        },
        businessMode: {
            value: '',
            list: [],
            originalList: [],
            isDisabled: false,
            is: 'selector'
        },
        tableName: {
            value: '',
            is: 'input'
        },
    };

    这个其实和上面写的如何创建文件夹命名是一个道理，我是从表格里面写订单还是在订单里面写表格，就像这个我是在名字里面描述他是什么还是在他是什么里面描述他叫什么名字，没有正确答案，要看应用场景，应用场景的出发点就是人，从人的角度

    数据分类
    在作自己项目的时候想把数据单独拿出来变成一个文件，然后在想这个页面数据的文件是放在这个页面的文件夹里面一起，还是放在有一个叫全都是放数据的地方，后来想想如果是要符合数据从底层到顶层的这么一个路线的话，越底层的东西那就是越平行，越是一类，没有纵向的概念，所以就是数据的文件就应该和数据的文件放在一起，如果拿手机来比喻的话就更加的形象了，到我们手的是一个完成的手机，是最顶层的，那么最底层东西肯定是每一类放在每一类的地方，cpu和cpu放在一起，等到需要组装的时候才会拿出来，

    现在是数据和页面放一起好找，数据和数据放一起好改，看数据是更贴近具体的页面还是抽象的层面

    😂启发
    promise启发
    任何异步的都能用promise，不单单是请求接口

    😂索菲亚
    一般来说，程序猿们大部分时间关注的可能不是研发某个具体算法，这是算法工程师／数学家们擅长的东东。程序猿的工作主要是通过调用编程环境中现成的工具函数或接口来实现具体的应用功能，将各个底层接口或算法模块用代码有秩序地拼装联接起来，实现酷炫好用的产品功能，如同组装一件乐高玩具一样。
    这段话摘自某位博主的原话，我觉得非常契合我对代码和哲学的统一理解

    😂知识点
    数据结构
    栈，链表，队列，数组，线性表
    储存数据结构的类型
    arr，josn，string，nubmer
    算法
    排序，查找
    函数式编程的核心的什么？
    封装动作，动态的
    一种运算过程
    函数式有哪些概念？
    纯函数，回调函数，高阶函数，谓词函数，递归，闭包，柯理化，消灭语句变为表达式
    js是门动态的语言
    设计原则
    单一职责原则，最少知道原则，开放封闭原则
    目的：解耦

    😂设计模式
    写个编辑页详情页统一为一个页面切换状态
    也就是状态模式
    空间
    时间
    数量
*/