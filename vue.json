{
  // Place your snippets for vue here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "详情弹窗": {
    "prefix": "detailModal",
    "body": [
      "<template>",
      "  <a-modal :visible=\"props.visible\" title=\"title\" @cancel=\"cancel\">",
      "    <template #footer>",
      "      <a-button type=\"primary\" @click=\"ok\">确定</a-button>",
      "    </template>",
      "    <a-descriptions>",
      "      <a-descriptions-item label=\"label\">label</a-descriptions-item>",
      "    </a-descriptions>",
      "  </a-modal>",
      "</template>",
      "<script setup lang=\"ts\">",
      "const props = defineProps<{",
      "  visible: boolean;",
      "}>();",
      "const emits = defineEmits<{",
      "  (event: \"update:visible\", visible: boolean): void;",
      "}>();",
      "const ok = () => {",
      "  emits(\"update:visible\", false);",
      "};",
      "const cancel = () => {",
      "  emits(\"update:visible\", false);",
      "};",
      "</script>"
    ],
    "description": "详情弹窗"
  },
  "表单弹窗": {
    "prefix": "formModal",
    "body": [
      "<template>",
      "  <a-modal",
      "    :visible=\"props.visible\"",
      "    title=\"title\"",
      "    @ok=\"ok\"",
      "    @cancel=\"cancel\"",
      "    :confirmLoading=\"confirmLoading\"",
      "  >",
      "    <a-form ref=\"formRef\" :model=\"model\">",
      "      ",
      "    </a-form>",
      "  </a-modal>",
      "</template>",
      "<script setup lang=\"ts\">",
      "import { ref, watch, reactive } from \"vue\";",
      "import { FormInstance, message, ModalProps } from \"ant-design-vue\";",
      "import { FormInterface } from \"../interface\";",
      "import { } from \"../api\";",
      "",
      "const props = defineProps<{",
      "  visible: boolean;",
      "}>();",
      "const emits = defineEmits<{",
      "  (event: \"update:visible\", visible: boolean): void;",
      "  (event: \"submit\"): void;",
      "}>();",
      "const model = reactive<FormInterface>({});",
      "const formRef = ref<FormInstance>();",
      "const confirmLoading = ref<boolean>(false);",
      "",
      "watch(",
      "  () => props.visible,",
      "  async (newValue) => {",
      "    if (newValue === true) {",
      "    }",
      "  }",
      ");",
      "",
      "const ok: ModalProps[\"onOk\"] = async (e) => {",
      "  try {",
      "    let data = await formRef.value?.validate();",
      "  ",
      "    message.success(\"成功\");",
      "    confirmLoading.value = true;",
      "    emits(\"submit\");",
      "    confirmLoading.value = false;",
      "    formRef.value?.resetFields();",
      "    emits(\"update:visible\", false);",
      "  } catch (error) {",
      "    confirmLoading.value = false;",
      "  }",
      "};",
      "const cancel: ModalProps[\"onCancel\"] = (e) => {",
      "  formRef.value?.resetFields();",
      "  emits(\"update:visible\", false);",
      "};",
      "</script>",
      ""
    ],
    "description": "表单弹窗"
  },
  "列表弹窗": {
    "prefix": "listModal",
    "body": [
      "<template>",
      "  <a-modal",
      "    :visible=\"props.visible\"",
      "    title=\"title\"",
      "    @ok=\"ok\"",
      "    @cancel=\"cancel\"",
      "    :width=\"1400\"",
      "  >",
      "    <a-form",
      "      ref=\"formRef\"",
      "      :model=\"model\"",
      "      :label-col=\"{ span: 6 }\"",
      "      @finish=\"finish\"",
      "    >",
      "      <a-row>",
      "        <a-col :span=\"8\"> </a-col>",
      "      </a-row>",
      "      <a-row>",
      "        <a-col :span=\"8\">",
      "          <a-form-item :wrapper-col=\"{ offset: 6 }\">",
      "            <a-space style=\"font-size: 18px\" size=\"large\">",
      "              <a-button html-type=\"submit\" type=\"primary\">",
      "                <search-outlined />",
      "              </a-button>",
      "              <clear-outlined @click=\"clearOutlinedClick\" />",
      "            </a-space>",
      "          </a-form-item>",
      "        </a-col>",
      "      </a-row>",
      "    </a-form>",
      "    <a-table",
      "      rowKey=\"id\"",
      "      :row-selection=\"{",
      "        selectedRowKeys,",
      "        onChange: rowSelectionOnChange,",
      "        getCheckboxProps,",
      "      }\"",
      "      :dataSource=\"dataSource?.list\"",
      "      :columns=\"columns\"",
      "      :loading=\"loading\"",
      "      :pagination=\"pagination\"",
      "      @change=\"tableChange\"",
      "    >",
      "      <template",
      "        #bodyCell=\"{",
      "          column,",
      "          record,",
      "        }: {",
      "          column: TableColumnType,",
      "          record: FormModelInterface,",
      "        }\"",
      "      >",
      "        <template v-if=\"column.key === 'operation'\"> </template>",
      "      </template>",
      "    </a-table>",
      "  </a-modal>",
      "</template>",
      "<script setup lang=\"ts\">",
      "import { ref, watch, reactive, computed } from \"vue\";",
      "import {",
      "  FormInstance,",
      "  ModalProps,",
      "  TableProps,",
      "  FormProps,",
      "  TableColumnType,",
      "} from \"ant-design-vue\";",
      "import { FormModelInterface } from \"../interface\";",
      "import { api } from \"../api\";",
      "import { columns } from \"../data\";",
      "import { usePagination } from \"vue-request\";",
      "import { SearchOutlined, ClearOutlined } from \"@ant-design/icons-vue\";",
      "import { TableRowSelection } from \"ant-design-vue/es/table/interface\";",
      "",
      "const props = defineProps<{",
      "  visible: boolean;",
      "  selectedRowKeys: any[];",
      "}>();",
      "const emits = defineEmits<{",
      "  (event: \"update:visible\", visible: boolean): void;",
      "  (",
      "    event: \"select\",",
      "    selectedRowKeys: any[],",
      "    selectedRowsArray: FormModelInterface[]",
      "  ): void;",
      "}>();",
      "",
      "const selectedRowKeys = ref<any>([]);",
      "const model = reactive<FormModelInterface>({});",
      "const formRef = ref<FormInstance>();",
      "const selectedRowsArray = ref<FormModelInterface[]>([]);",
      "const {",
      "  data: dataSource,",
      "  current,",
      "  pageSize,",
      "  run,",
      "  loading,",
      "  total,",
      "} = usePagination(api, {",
      "  manual: true,",
      "  formatResult: ({ data }) => {",
      "    return data;",
      "  },",
      "  pagination: {",
      "    currentKey: \"page\",",
      "    pageSizeKey: \"page_size\",",
      "    totalKey: \"total\",",
      "  },",
      "});",
      "",
      "const finish: FormProps[\"onFinish\"] = async (values) => {",
      "  run({",
      "    page: 1,",
      "    page_size: 10,",
      "    ...model,",
      "  });",
      "};",
      "",
      "const pagination = computed(() => {",
      "  return {",
      "    total: total.value,",
      "    current: current.value,",
      "    pageSize: pageSize.value,",
      "    hideOnSinglePage: true,",
      "  };",
      "});",
      "",
      "const rowSelectionOnChange: TableRowSelection[\"onChange\"] = (keys, rows) => {",
      "  selectedRowKeys.value = keys;",
      "  selectedRowsArray.value = rows;",
      "};",
      "",
      "const tableChange: TableProps[\"onChange\"] = async (pag) => {",
      "  run({",
      "    page: pag.current as number,",
      "    page_size: pag.pageSize as number,",
      "    ...model,",
      "  });",
      "};",
      "",
      "const getCheckboxProps: TableRowSelection[\"getCheckboxProps\"] = (record) => {",
      "  return {",
      "    disabled: props.selectedRowKeys.includes(record.id),",
      "  };",
      "};",
      "",
      "const clearOutlinedClick = () => {",
      "  formRef.value?.resetFields();",
      "};",
      "",
      "const ok: ModalProps[\"onOk\"] = async (e) => {",
      "  formRef.value?.resetFields();",
      "",
      "  emits(\"select\", selectedRowKeys.value, selectedRowsArray.value);",
      "  emits(\"update:visible\", false);",
      "};",
      "const cancel: ModalProps[\"onCancel\"] = (e) => {",
      "  formRef.value?.resetFields();",
      "  emits(\"update:visible\", false);",
      "};",
      "",
      "watch(",
      "  () => props.visible,",
      "  async (newValue) => {",
      "    if (newValue === true) {",
      "      run({",
      "        page: 1,",
      "        page_size: 10,",
      "      });",
      "    }",
      "  }",
      ");",
      "</script>"
    ],
    "description": "列表弹窗"
  },
  "表格弹窗": {
    "prefix": "tableModal",
    "body": [
      "<template>",
      "  <a-modal",
      "    :visible=\"props.visible\"",
      "    title=\"title\"",
      "    @cancel=\"cancel\"",
      "    :width=\"1000\"",
      "  >",
      "    <template #footer>",
      "      <a-button type=\"primary\" @click=\"cancel\">确定</a-button>",
      "    </template>",
      "    <a-table",
      "      rowKey=\"id\"",
      "      :dataSource=\"dataSource?.list\"",
      "      :columns=\"columns\"",
      "      :loading=\"loading\"",
      "      :pagination=\"false\"",
      "    >",
      "      <template",
      "        #bodyCell=\"{",
      "          column,",
      "          record,",
      "        }: {",
      "          column: TableColumnType,",
      "          record: tableInterface,",
      "        }\"",
      "      >",
      "        <template v-if=\"column.key === 'name'\"> </template>",
      "      </template>",
      "    </a-table>",
      "  </a-modal>",
      "</template>",
      "<script setup lang=\"ts\">",
      "import { ModalProps,TableColumnType } from \"ant-design-vue\";",
      "import { ref, watch, computed } from \"vue\";",
      "import { columns } from \"../data\";",
      "import { usePagination } from \"vue-request\";",
      "import {tableInterface} '../interface'",
      "import { api } from \"../api\";",
      "",
      "const props = defineProps<{",
      "  visible: boolean;",
      "}>();",
      "const emits = defineEmits<{",
      "  (event: \"update:visible\", visible: boolean): void;",
      "}>();",
      "",
      "const {",
      "  data: dataSource,",
      "  current,",
      "  pageSize,",
      "  run,",
      "  loading,",
      "  total,",
      "} = usePagination(api, {",
      "  manual: true,",
      "  formatResult: ({ data }) => {",
      "    return data;",
      "  },",
      "  pagination: {",
      "    currentKey: \"page\",",
      "    pageSizeKey: \"page_size\",",
      "    totalKey: \"total\",",
      "  },",
      "});",
      "",
      "const pagination = computed(() => {",
      "  return {",
      "    total: total.value,",
      "    current: current.value,",
      "    pageSize: pageSize.value,",
      "    hideOnSinglePage: true,",
      "  };",
      "});",
      "watch(",
      "  () => props.visible,",
      "  (newValue) => {",
      "    if (newValue === true) {",
      "      run({",
      "        page: 1,",
      "        page_size: 10,",
      "      });",
      "    }",
      "  }",
      ");",
      "",
      "const cancel: ModalProps[\"onCancel\"] = () => {",
      "  emits(\"update:visible\", false);",
      "};",
      "</script>"
    ],
    "description": "表格弹窗"
  },
  "详情抽屉": {
    "prefix": "detailDrawer",
    "body": [
      "<template>",
      "  <a-drawer :visible=\"props.visible\" title=\"title\" @close=\"close\">",
      "    <a-descriptions>",
      "      <a-descriptions-item label=\"label\">label</a-descriptions-item>",
      "    </a-descriptions>",
      "  </a-drawer>",
      "</template>",
      "<script setup lang=\"ts\">",
      "import { DrawerProps } from \"ant-design-vue\";",
      "",
      "const props = defineProps<{",
      "  visible: boolean;",
      "}>();",
      "const emits = defineEmits<{",
      "  (event: \"update:visible\", visible: boolean): void;",
      "}>();",
      "const close: DrawerProps[\"onClose\"] = () => {",
      "  emits(\"update:visible\", false);",
      "};",
      "</script>"
    ],
    "description": "详情抽屉"
  },
  "表单抽屉": {
    "prefix": "formDrawer",
    "body": [
      "<template>",
      "  <a-drawer :visible=\"props.visible\" title=\"title\" @close=\"close\" :width=\"1000\">",
      "    <template #extra>",
      "      <a-space>",
      "        <a-button @click=\"close\">取消</a-button>",
      "        <a-button type=\"primary\" @click=\"submitButtonClick\" :loading=\"loading\"",
      "          >提交</a-button",
      "        >",
      "      </a-space>",
      "    </template>",
      "    <a-form ref=\"formRef\" :model=\"model\"> </a-form>",
      "  </a-drawer>",
      "</template>",
      "<script setup lang=\"ts\">",
      "import { ref, watch, reactive } from \"vue\";",
      "import { FormInstance, message, DrawerProps } from \"ant-design-vue\";",
      "import { FormInterface } from \"../interface\";",
      "import {} from \"../api\";",
      "",
      "const props = defineProps<{",
      "  visible: boolean;",
      "}>();",
      "const emits = defineEmits<{",
      "  (event: \"update:visible\", visible: boolean): void;",
      "  (event: \"submit\"): void;",
      "}>();",
      "const model = reactive<FormInterface>({});",
      "const formRef = ref<FormInstance>();",
      "const loading = ref<boolean>(false);",
      "",
      "watch(",
      "  () => props.visible,",
      "  async (newValue) => {",
      "    if (newValue === true) {",
      "    }",
      "  }",
      ");",
      "",
      "const submitButtonClick = async () => {",
      "  try {",
      "    let data = await formRef.value?.validate();",
      "",
      "    message.success(\"成功\");",
      "    loading.value = true;",
      "    emits(\"submit\");",
      "    loading.value = false;",
      "    formRef.value?.resetFields();",
      "    emits(\"update:visible\", false);",
      "  } catch (error) {",
      "    loading.value = false;",
      "  }",
      "};",
      "const close: DrawerProps[\"onClose\"] = (e) => {",
      "  formRef.value?.resetFields();",
      "  emits(\"update:visible\", false);",
      "};",
      "</script>"
    ],
    "description": "表单抽屉"
  },
  "表格抽屉": {
    "prefix": "tableDrawer",
    "body": [
      "<template>",
      "  <a-drawer :visible=\"props.visible\" title=\"title\" @close=\"close\" :width=\"1000\">",
      "    <a-table",
      "      rowKey=\"id\"",
      "      :dataSource=\"dataSource?.list\"",
      "      :columns=\"columns\"",
      "      :loading=\"loading\"",
      "      :pagination=\"false\"",
      "    >",
      "      <template",
      "        #bodyCell=\"{",
      "          column,",
      "          record,",
      "        }: {",
      "          column: TableColumnType,",
      "          record: tableInterface,",
      "        }\"",
      "      >",
      "        <template v-if=\"column.key === 'name'\"> </template>",
      "      </template>",
      "    </a-table>",
      "  </a-drawer>",
      "</template>",
      "<script setup lang=\"ts\">",
      "import { DrawerProps,TableColumnType } from \"ant-design-vue\";",
      "import { ref, watch, computed } from \"vue\";",
      "import { columns } from \"../data\";",
      "import { usePagination } from \"vue-request\";",
      "import {tableInterface} '../interface';",
      "import { api } from \"../api\";",
      "",
      "const props = defineProps<{",
      "  visible: boolean;",
      "}>();",
      "const emits = defineEmits<{",
      "  (event: \"update:visible\", visible: boolean): void;",
      "}>();",
      "",
      "const {",
      "  data: dataSource,",
      "  current,",
      "  pageSize,",
      "  run,",
      "  loading,",
      "  total,",
      "} = usePagination(api, {",
      "  manual: true,",
      "  formatResult: ({ data }) => {",
      "    return data;",
      "  },",
      "  pagination: {",
      "    currentKey: \"page\",",
      "    pageSizeKey: \"page_size\",",
      "    totalKey: \"total\",",
      "  },",
      "});",
      "",
      "const pagination = computed(() => {",
      "  return {",
      "    total: total.value,",
      "    current: current.value,",
      "    pageSize: pageSize.value,",
      "    hideOnSinglePage: true,",
      "  };",
      "});",
      "watch(",
      "  () => props.visible,",
      "  (newValue) => {",
      "    if (newValue === true) {",
      "      run({",
      "        page: 1,",
      "        page_size: 10,",
      "      });",
      "    }",
      "  }",
      ");",
      "",
      "const close: DrawerProps[\"onClose\"] = () => {",
      "  emits(\"update:visible\", false);",
      "};",
      "</script>"
    ],
    "description": "表格抽屉"
  },
  "列表抽屉": {
    "prefix": "listDrawer",
    "body": [
      "<template>",
      "  <a-drawer :visible=\"props.visible\" title=\"title\" @close=\"close\" :width=\"1400\">",
      "    <template #extra>",
      "      <a-space>",
      "        <a-button @click=\"close\">取消</a-button>",
      "        <a-button type=\"primary\" @click=\"submitButtonClick\">提交</a-button>",
      "      </a-space>",
      "    </template>",
      "    <a-form",
      "      ref=\"formRef\"",
      "      :model=\"model\"",
      "      :label-col=\"{ span: 6 }\"",
      "      @finish=\"finish\"",
      "    >",
      "      <a-row>",
      "        <a-col :span=\"8\"> </a-col>",
      "      </a-row>",
      "      <a-row>",
      "        <a-col :span=\"8\">",
      "          <a-form-item :wrapper-col=\"{ offset: 6 }\">",
      "            <a-space style=\"font-size: 18px\" size=\"large\">",
      "              <a-button html-type=\"submit\" type=\"primary\">",
      "                <search-outlined />",
      "              </a-button>",
      "              <clear-outlined @click=\"clearOutlinedClick\" />",
      "            </a-space>",
      "          </a-form-item>",
      "        </a-col>",
      "      </a-row>",
      "    </a-form>",
      "    <a-table",
      "      rowKey=\"id\"",
      "      :row-selection=\"{",
      "        selectedRowKeys,",
      "        onChange: rowSelectionOnChange,",
      "        getCheckboxProps,",
      "      }\"",
      "      :dataSource=\"dataSource?.list\"",
      "      :columns=\"columns\"",
      "      :loading=\"loading\"",
      "      :pagination=\"pagination\"",
      "      @change=\"tableChange\"",
      "    >",
      "      <template",
      "        #bodyCell=\"{",
      "          column,",
      "          record,",
      "        }: {",
      "          column: TableColumnType,",
      "          record: FormModelInterface,",
      "        }\"",
      "      >",
      "        <template v-if=\"column.key === 'operation'\"> </template>",
      "      </template>",
      "    </a-table>",
      "  </a-drawer>",
      "</template>",
      "<script setup lang=\"ts\">",
      "import { ref, watch, reactive, computed } from \"vue\";",
      "import {",
      "  FormInstance,",
      "  DrawerProps,",
      "  TableProps,",
      "  FormProps,",
      "  TableColumnType,",
      "} from \"ant-design-vue\";",
      "import { FormModelInterface } from \"../interface\";",
      "import { api } from \"../api\";",
      "import { columns } from \"../data\";",
      "import { usePagination } from \"vue-request\";",
      "import { SearchOutlined, ClearOutlined } from \"@ant-design/icons-vue\";",
      "import { TableRowSelection } from \"ant-design-vue/es/table/interface\";",
      "",
      "const props = defineProps<{",
      "  visible: boolean;",
      "  selectedRowKeys: FormModelInterface[];",
      "}>();",
      "const emits = defineEmits<{",
      "  (event: \"update:visible\", visible: boolean): void;",
      "  (",
      "    event: \"select\",",
      "    selectedRowKeys: any[],",
      "    selectedRowsArray: FormModelInterface[]",
      "  ): void;",
      "}>();",
      "",
      "const selectedRowKeys = ref<any>([]);",
      "const model = reactive<FormModelInterface>({});",
      "const formRef = ref<FormInstance>();",
      "const selectedRowsArray = ref<FormModelInterface[]>([]);",
      "const {",
      "  data: dataSource,",
      "  current,",
      "  pageSize,",
      "  run,",
      "  loading,",
      "  total,",
      "} = usePagination(api, {",
      "  manual: true,",
      "  formatResult: ({ data }) => {",
      "    return data;",
      "  },",
      "  pagination: {",
      "    currentKey: \"page\",",
      "    pageSizeKey: \"page_size\",",
      "    totalKey: \"total\",",
      "  },",
      "});",
      "",
      "const finish: FormProps[\"onFinish\"] = async (values) => {",
      "  run({",
      "    page: 1,",
      "    page_size: 10,",
      "    ...model,",
      "  });",
      "};",
      "",
      "const pagination = computed(() => {",
      "  return {",
      "    total: total.value,",
      "    current: current.value,",
      "    pageSize: pageSize.value,",
      "    hideOnSinglePage: true,",
      "  };",
      "});",
      "",
      "const rowSelectionOnChange: TableRowSelection[\"onChange\"] = (keys, rows) => {",
      "  selectedRowKeys.value = keys;",
      "  selectedRowsArray.value = rows;",
      "};",
      "",
      "const tableChange: TableProps[\"onChange\"] = async (pag) => {",
      "  run({",
      "    page: pag.current as number,",
      "    page_size: pag.pageSize as number,",
      "    ...model,",
      "  });",
      "};",
      "",
      "const getCheckboxProps: TableRowSelection[\"getCheckboxProps\"] = (record) => {",
      "  return {",
      "    disabled: props.selectedRowKeys.includes(record.id),",
      "  };",
      "};",
      "",
      "const clearOutlinedClick = () => {",
      "  formRef.value?.resetFields();",
      "};",
      "",
      "const submitButtonClick = async (e) => {",
      "  formRef.value?.resetFields();",
      "",
      "  emits(\"select\", selectedRowKeys.value, selectedRowsArray.value);",
      "  emits(\"update:visible\", false);",
      "};",
      "const close: DrawerProps[\"onClose\"] = (e) => {",
      "  formRef.value?.resetFields();",
      "  emits(\"update:visible\", false);",
      "};",
      "",
      "watch(",
      "  () => props.visible,",
      "  async (newValue) => {",
      "    if (newValue === true) {",
      "      run({",
      "        page: 1,",
      "        page_size: 10,",
      "      });",
      "    }",
      "  }",
      ");",
      "</script>"
    ],
    "description": "列表抽屉"
  },
  "列表页面": {
    "prefix": "listPage",
    "body": [
      "<template>",
      "  <a-form ref=\"formRef\" :model=\"model\" @finish=\"finish\">",
      "    <a-row :style=\"`height:${height};overflow:hidden`\">",
      "      <a-col :span=\"8\"> </a-col>",
      "    </a-row>",
      "    <a-row>",
      "      <a-col :span=\"8\">",
      "        <a-form-item :wrapper-col=\"{ offset: 6 }\">",
      "          <a-space style=\"font-size: 18px\" size=\"large\">",
      "            <a-button html-type=\"submit\" type=\"primary\">",
      "              <search-outlined />",
      "            </a-button>",
      "            <clear-outlined @click=\"clearOutlinedClick\" />",
      "            <up-outlined @click=\"arrowClick\" v-if=\"isExpandArrowBoolean\" />",
      "            <down-outlined @click=\"arrowClick\" v-else />",
      "          </a-space>",
      "        </a-form-item>",
      "      </a-col>",
      "    </a-row>",
      "  </a-form>",
      "",
      "  <a-table",
      "    rowKey=\"id\"",
      "    :dataSource=\"dataSource?.list\"",
      "    :columns=\"columns\"",
      "    :loading=\"loading\"",
      "    :pagination=\"pagination\"",
      "    @change=\"tableChange\"",
      "  >",
      "    <template",
      "      #bodyCell=\"{",
      "        column,",
      "        record,",
      "      }: {",
      "        column: TableColumnType,",
      "        record: ModelInterface,",
      "      }\"",
      "    >",
      "      <template v-if=\"column.key === 'operation'\"> </template>",
      "    </template>",
      "  </a-table>",
      "</template>",
      "<script setup lang=\"ts\">",
      "import { ref, watch, reactive, computed } from \"vue\";",
      "import {",
      "  message,",
      "  FormInstance,",
      "  TableProps,",
      "  TableColumnType,",
      "  FormProps,",
      "} from \"ant-design-vue\";",
      "import {} from \"../../../data/dictionary\";",
      "import { columns } from \"./listPageData\";",
      "import {",
      "  DownOutlined,",
      "  UpOutlined,",
      "  SearchOutlined,",
      "  ClearOutlined,",
      "} from \"@ant-design/icons-vue\";",
      "import type {",
      "  ModelInterface,",
      "  ConfirmsignInterface,",
      "  ConfirmPreOrderInterface,",
      "} from \"./interface\";",
      "import { api } from \"./api\";",
      "import { usePagination } from \"vue-request\";",
      "",
      "const model = reactive<ModelInterface>({});",
      "const formRef = ref<FormInstance>();",
      "const height = ref<string>(\"220px\");",
      "const {",
      "  data: dataSource,",
      "  current,",
      "  pageSize,",
      "  run,",
      "  loading,",
      "  total,",
      "} = usePagination(api, {",
      "  formatResult: ({ data }) => {",
      "    return data;",
      "  },",
      "  pagination: {",
      "    currentKey: \"page\",",
      "    pageSizeKey: \"page_size\",",
      "    totalKey: \"total\",",
      "  },",
      "});",
      "",
      "const pagination = computed(() => {",
      "  return {",
      "    total: total.value,",
      "    current: current.value,",
      "    pageSize: pageSize.value,",
      "    hideOnSinglePage: true,",
      "  };",
      "});",
      "",
      "const finish: FormProps[\"onFinish\"] = async (values) => {",
      "  console.log(model, 123);",
      "  run({",
      "    page: 1,",
      "    page_size: 10,",
      "    ...model,",
      "  });",
      "};",
      "",
      "const arrowClick = () => {",
      "  isExpandArrowBoolean.value = !isExpandArrowBoolean.value;",
      "};",
      "",
      "const clearOutlinedClick = () => {",
      "  formRef.value?.resetFields();",
      "  model.order_search_value = undefined;",
      "  model.good_search_value = undefined;",
      "};",
      "",
      "const tableChange: TableProps[\"onChange\"] = async (pag) => {",
      "  run({",
      "    page: pag.current as number,",
      "    page_size: pag.pageSize as number,",
      "    ...model,",
      "  });",
      "};",
      "",
      "const isExpandArrowBoolean = ref<boolean>(false);",
      "watch(isExpandArrowBoolean, (newValue) => {",
      "  if (newValue) {",
      "    height.value = \"auto\";",
      "  } else {",
      "    height.value = \"220px\";",
      "  }",
      "});",
      "</script>",
      ""
    ],
    "description": "列表页面"
  },
  "表单页面": {
    "prefix": "formPage",
    "body": [
      "<template>",
      "  <a-form",
      "    ref=\"formRef\"",
      "    :model=\"formModel\"",
      "    @finish=\"formFinish\"",
      "    @finishFailed=\"finishFailed\"",
      "  >",
      "    <a-row>",
      "      <a-col :span=\"8\">",
      "        <a-form-item",
      "          label=\"label\"",
      "          :label-col=\"{ span: 6 }\"",
      "          :name=\"['a']\"",
      "          :rules=\"{",
      "            required: true,",
      "            message: '请输入',",
      "          }\"",
      "        >",
      "          <a-input v-model:value=\"formModel.a\" placeholder=\"请输入\" />",
      "        </a-form-item>",
      "      </a-col>",
      "      <a-col :span=\"8\">",
      "        <a-form-item",
      "          label=\"label\"",
      "          :label-col=\"{ span: 6 }\"",
      "          :name=\"['b']\"",
      "          :rules=\"{",
      "            required: true,",
      "            message: '请输入',",
      "          }\"",
      "        >",
      "          <a-input-number",
      "            v-model:value=\"formModel.b\"",
      "            placeholder=\"请输入\"",
      "            style=\"width: 100%\"",
      "          />",
      "        </a-form-item>",
      "      </a-col>",
      "      <a-col :span=\"8\">",
      "        <a-form-item",
      "          label=\"label\"",
      "          :label-col=\"{ span: 6 }\"",
      "          :name=\"['time']\"",
      "          :rules=\"{",
      "            required: true,",
      "            message: '请选择',",
      "          }\"",
      "        >",
      "          <a-range-picker v-model:value=\"formModel.time\" style=\"width: 100%\" />",
      "        </a-form-item>",
      "      </a-col>",
      "      <a-col :span=\"8\">",
      "        <a-form-item",
      "          label=\"label\"",
      "          :label-col=\"{ span: 6 }\"",
      "          :name=\"['c']\"",
      "          :rules=\"{",
      "            required: true,",
      "            message: '请选择',",
      "          }\"",
      "        >",
      "          <a-select v-model:value=\"formModel.c\" placeholder=\"请选择\">",
      "            <a-select-option :value=\"0\">0</a-select-option>",
      "            <a-select-option :value=\"1\">1</a-select-option>",
      "          </a-select>",
      "        </a-form-item>",
      "      </a-col>",
      "      <a-col :span=\"8\">",
      "        <a-form-item",
      "          label=\"label\"",
      "          :label-col=\"{ span: 6 }\"",
      "          :name=\"['d']\"",
      "          :rules=\"{",
      "            required: true,",
      "            message: '请选择',",
      "          }\"",
      "        >",
      "          <a-switch v-model:checked=\"formModel.d\" />",
      "        </a-form-item>",
      "      </a-col>",
      "      <a-col :span=\"8\">",
      "        <a-form-item",
      "          label=\"label\"",
      "          :label-col=\"{ span: 6 }\"",
      "          :name=\"['e']\"",
      "          :rules=\"{",
      "            required: true,",
      "            message: '请选择',",
      "          }\"",
      "        >",
      "          <a-checkbox-group v-model:value=\"formModel.e\">",
      "            <a-checkbox :value=\"1\">checkbox</a-checkbox>",
      "            <a-checkbox :value=\"2\">checkbox</a-checkbox>",
      "            <a-checkbox :value=\"3\">checkbox</a-checkbox>",
      "          </a-checkbox-group>",
      "        </a-form-item>",
      "      </a-col>",
      "      <a-col :span=\"8\">",
      "        <a-form-item",
      "          label=\"label\"",
      "          :label-col=\"{ span: 6 }\"",
      "          :name=\"['f']\"",
      "          :rules=\"{",
      "            required: true,",
      "            message: '请选择',",
      "          }\"",
      "        >",
      "          <a-radio-group v-model:value=\"formModel.f\">",
      "            <a-radio :value=\"1\">radio</a-radio>",
      "            <a-radio :value=\"2\">Venue</a-radio>",
      "          </a-radio-group>",
      "        </a-form-item>",
      "      </a-col>",
      "    </a-row>",
      "    <a-row>",
      "      <a-col :span=\"8\">",
      "        <a-form-item",
      "          v-for=\"(domain, index) in formModel.domains\"",
      "          :key=\"domain.key\"",
      "          :label-col=\"index === 0 ? { span: 6 } : {}\"",
      "          :wrapper-col=\"index !== 0 ? { offset: 6 } : {}\"",
      "          :label=\"index === 0 ? 'label' : ''\"",
      "          :name=\"['domains', index, 'value']\"",
      "          :rules=\"{",
      "            required: true,",
      "            message: '请输入',",
      "          }\"",
      "        >",
      "          <a-input",
      "            v-model:value=\"domain.value\"",
      "            placeholder=\"请输入\"",
      "            style=\"width: 90%; margin-right: 8px\"",
      "          />",
      "          <minus-circle-outlined",
      "            v-if=\"formModel.domains.length > 1\"",
      "            class=\"dynamic-delete-button\"",
      "            :disabled=\"formModel.domains.length === 1\"",
      "            @click=\"removeButtonclick(domain)\"",
      "          />",
      "        </a-form-item>",
      "        <a-form-item :wrapper-col=\"{ offset: 6 }\">",
      "          <a-button type=\"dashed\" style=\"width: 90%\" @click=\"addButtonClick\">",
      "            <plus-outlined />",
      "            添加",
      "          </a-button>",
      "        </a-form-item>",
      "      </a-col>",
      "    </a-row>",
      "    <a-row>",
      "      <a-col :span=\"8\">",
      "        <a-form-item",
      "          label=\"label\"",
      "          :label-col=\"{ span: 6 }\"",
      "          :name=\"['h']\"",
      "          :rules=\"{",
      "            required: true,",
      "            validator: textareaValidator,",
      "            message: '请输入',",
      "          }\"",
      "        >",
      "          <a-textarea",
      "            v-model:value=\"formModel.h\"",
      "            placeholder=\"请输入\"",
      "            show-count",
      "            auto-size",
      "            :maxlength=\"200\"",
      "          />",
      "        </a-form-item>",
      "      </a-col>",
      "    </a-row>",
      "    <a-row>",
      "      <a-col :span=\"24\">",
      "        <a-form-item label=\"label\" :name=\"['j']\" :label-col=\"{ span: 2 }\">",
      "          <a-table",
      "            rowKey=\"id\"",
      "            :dataSource=\"formModel.dataSource\"",
      "            :columns=\"columns\"",
      "            :pagination=\"false\"",
      "          >",
      "            <template #headerCell=\"{ column }\">",
      "              <template v-if=\"column.key === 'name3'\">",
      "                <div class=\"myRequired\">{{ column.title }}</div>",
      "              </template>",
      "            </template>",
      "            <template #bodyCell=\"{ column, record, index }\">",
      "              <template v-if=\"column.key === 'name3'\">",
      "                <a-form-item",
      "                  :name=\"['dataSource', index, 'abc']\"",
      "                  :rules=\"{",
      "                    required: true,",
      "                    message: '请输入',",
      "                  }\"",
      "                >",
      "                  <a-input",
      "                    v-model:value=\"formModel.dataSource[index].abc\"",
      "                    placeholder=\"请输入\"",
      "                  />",
      "                </a-form-item>",
      "              </template>",
      "            </template>",
      "          </a-table>",
      "        </a-form-item>",
      "      </a-col>",
      "    </a-row>",
      "    <a-button type=\"primary\" html-type=\"submit\">提交</a-button>",
      "  </a-form>",
      "</template>",
      "<script setup>",
      "import { ref, watch, reactive } from \"vue\";",
      "import { DownOutlined, UpOutlined } from \"@ant-design/icons-vue\";",
      "import { message } from \"ant-design-vue\";",
      "import { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons-vue\";",
      "import Tx from \"./t.vue\";",
      "",
      "const columns = [",
      "  {",
      "    title: \"操作\",",
      "    dataIndex: \"operation\",",
      "    key: \"operation\",",
      "  },",
      "  {",
      "    title: \"title\",",
      "    dataIndex: \"is_listing\",",
      "    key: \"is_listing\",",
      "  },",
      "  {",
      "    title: \"title\",",
      "    dataIndex: \"stock\",",
      "    key: \"stock\",",
      "  },",
      "  {",
      "    title: \"title\",",
      "    dataIndex: \"name3\",",
      "    key: \"name3\",",
      "  },",
      "  {",
      "    title: \"title\",",
      "    dataIndex: \"name4\",",
      "    key: \"name4\",",
      "  },",
      "];",
      "const formModel = reactive({",
      "  domains: [],",
      "  dataSource: [{ id: 1 }],",
      "});",
      "const formRef = ref();",
      "const removeButtonclick = (item) => {",
      "  let index = formModel.domains.indexOf(item);",
      "",
      "  if (index !== -1) {",
      "    formModel.domains.splice(index, 1);",
      "  }",
      "};",
      "",
      "const addButtonClick = () => {",
      "  formModel.domains.push({",
      "    value: \"\",",
      "    key: Date.now(),",
      "  });",
      "};",
      "",
      "const textareaValidator = async (_rule, value) => {",
      "  if (value === \"\") {",
      "    return Promise.reject(\"请输入\");",
      "  } else {",
      "    return Promise.resolve();",
      "  }",
      "};",
      "",
      "const formFinish = (e) => {",
      "  console.log(e, 1);",
      "};",
      "const finishFailed = (e) => {",
      "  console.log(formModel, 1);",
      "};",
      "</script>",
      ""
    ],
    "description": "表单页面"
  },
  "详情页面": {
    "prefix": "detailPage",
    "body": [
      "<template>",
      "  <a-descriptions>",
      "    <a-descriptions-item label=\"label\">label</a-descriptions-item>",
      "  </a-descriptions>",
      "</template>",
      "<script setup lang=\"ts\">",
      "import { useRouter, useRoute } from \"vue-router\";",
      "",
      "const router = useRouter();",
      "const route = useRoute();",
      "</script>"
    ],
    "description": "详情页面"
  }
}